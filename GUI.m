%% Initialization
clc;
addpath functions callbacks dummies data indicators oscillators strategies;

%% Preparations
constant = struct(...
    'firmName', 'femeli',... text
    'firmInterval', 'Daily',... text
    'adjustment', true, ... boolean (false, true)
    'alphaWeak' , 0.75,... unitless (0, 1)
    'alphaMedium' , 0.5,... unitless (0, 1)
    'alphaStrong' , 0.15,... unitless (0, 1)
    'fontName', 'Tahoma',... text
    'fontSize', 8,... pt (1, inf)
    'ratioPxPt', 72/get(0, 'ScreenPixelsPerInch'),... unitless (0, inf)
    'border', 2,... px (0, inf)
    'margin', 4,... px (0, inf)
    'radiusCorner', 2,... px (0, inf)
    'widthLineThin', 1,... px (0, inf)
    'widthLineMedium', 2,... px (0, inf)
    'widthLineThick', 3,... px (0, inf)
    'widthCandle', 0.5, ... index axis unit (0, inf)
    'dateStarting', datenum(dmmyDateJalaliToGregorian([1399 01 01])),... date {yyyymmdd}
    'dateEnding', datenum(datetime('now')),... date {yyyymmdd}
    'initialResolutionIndex', 25,... unitless (1, inf)
    'offsetPrice', 0.5); %price axis resolution (0, inf)
fprintf('Preparing the specifications\n');
if ~exist('specs', 'var')
    if ~exist('specs.xls', 'file')
        fprintf('\t- no file was found\n');
        return;
    end
    specs = readtable('specs.xls');
end
fprintf('\t- %u firm(s) got found: %s\n', size(specs, 1), dmmyVectorToList(specs.nameEnglish, '%s', '|', ''));
while true
    decision = input(sprintf('\t- choose your desired firm or leave the input empty to continue with the default one (%s): ', constant.firmName), 's');
    if strcmp(decision, 'none')
        return;
    end
    if strcmp(decision, '')
        fprintf('\b%s\n', constant.firmName);
        decision = constant.firmName;
    end
    if ismember(decision, specs.nameEnglish)
        constant.firmName = decision;
        break;
    end
end

%%Firms
if  ~exist('gameChanger', 'var') || ~strcmp(gameChanger.firmName, constant.firmName) || gameChanger.adjustment~=constant.adjustment
    clearvars -except constant;
    file = matfile('databaseWeekly.mat');
    firmWeekly = file.(constant.firmName);
    file = matfile('databaseDaily.mat');
    firmDaily = file.(constant.firmName);
    temp = fieldnames(firmDaily.candle);
    temp(strcmp(temp, 'status')) = [];
    for j = 1:numel(temp)
        firmWeekly.candle.(temp{j}) = double(firmWeekly.candle.(temp{j}));
        firmDaily.candle.(temp{j}) = double(firmDaily.candle.(temp{j}));
    end
    if constant.adjustment
        temp = {'start', 'low', 'open', 'close', 'high', 'mean', 'last'};
        for j = 1:numel(temp)
            firmWeekly.candle.(temp{j}) = firmWeekly.candle.(temp{j}).*firmWeekly.candle.adjustment;
            firmDaily.candle.(temp{j}) = firmDaily.candle.(temp{j}).*firmDaily.candle.adjustment;
        end
    end
    gameChanger = struct(...
        'firmName', constant.firmName,...
        'adjustment', constant.adjustment);
end
eval(['firm = firm' constant.firmInterval ';']);

%%Mapping
mapping = struct(...
    'description', 'Logarithmic',...
    'forward', @(x) log(x),...
    'reverse', @(x) exp(x));

%%Palette
file = matfile('palette.mat');
palette = struct(...
    'background', file.greyStrong,...
    'container', file.darkStrong,...
    'grid', file.lightStrong,...
    'textLight', file.lightStrong,...
    'textDark', file.darkStrong,...
    'oscillatorBase', file.orangeWeak,...
    'oscillatorSignal', file.blueWeak,...
    'oscillatorBoundary', file.violetWeak,...
    'indicatorBase', file.orangeWeak,...
    'indicatorSignal', file.blueWeak,...
    'indicatorExtra1', file.yellowMedium,...
    'indicatorExtra2', file.cyanWeak,...
    'indicatorExtra3', file.redWeak,...
    'indicatorExtra4', file.jadeWeak,...
    'strategyBuy', file.yellowMedium, ...
    'strategySale', file.pinkWeak, ...
    'strategyInDecision', file.tanWeak,...
    'candle', file.lightWeak);

%%Oscillator
oscillator = struct(...
    'name', {'FullStochastic' 'RSI' 'MFI'},...
    'framed', {false false false},...
    'grid', {[true true] [true true] [true true]},...
    'rule', {'' 'wilder' 'movmean'},...
    'parameter', {[14 3 3] 14 14});

%%Indicator
indicator = struct(...
    'name', {'BasicVolume' 'ExpertVolume' 'Transfer' 'Power' 'Levels' 'Ichimoku'},...
    'framed', {false false false false true false},...
    'grid', {[true true] [true true] [true true] [true true] [true false] [true true]},...
    'rule', {'' '' '' '' {'pchip' func2str(mapping.forward)} ''},...
    'foresight', {0 0 0 0 0 26},...
    'parameter', {'' '' '' '' [5 10 0.5 0.6] [26 9 52]});

%%Strategy
strategy = struct(...
    'name', 'Miner',...
    'visible', true);

%% Controllers
fprintf('%s\n', repmat('-', 1, 100));
fprintf('Preparing the environment\n');

controller = struct(...
    'widthAxis', [90 50],...
    'heightItem', 15,...
    'ratioPercentagePrice', 0.4,...
    'intervalIndex', '',...
    'intervalPercentage', [0 1],...
    'intervalPrice', '',...
    'resolutionIndex', '',...
    'resolutionPercentage', 5,...
    'resolutionPrice', 11);
controller.intervalIndex = [find(datenum(firm.candle.dateGregorian)<=constant.dateStarting, 1, 'last') find(datenum(firm.candle.dateGregorian)<=constant.dateEnding, 1, 'last')+max([indicator.foresight])];
controller.intervalIndex(controller.intervalIndex<1) = 1;
controller.intervalIndex(controller.intervalIndex>firm.total) = firm.total;
temp = dmmyClip(controller.intervalIndex(1)-(0:constant.initialResolutionIndex-1), 'Below', 1);
temp = temp(rem((controller.intervalIndex(2)-temp)/constant.initialResolutionIndex, 1)==0);
controller.intervalIndex(1) = temp(1);
controller.intervalPrice = [min(mapping.forward(firm.candle.low(controller.intervalIndex(1):dmmyClip(controller.intervalIndex(2), 'Above', numel(firm.candle.low))))) max(mapping.forward(firm.candle.high(controller.intervalIndex(1):dmmyClip(controller.intervalIndex(2), 'Above', numel(firm.candle.high)))))]*[controller.resolutionPrice+constant.offsetPrice -constant.offsetPrice;-constant.offsetPrice controller.resolutionPrice+constant.offsetPrice]/controller.resolutionPrice;
temp = constant.initialResolutionIndex + [0 reshape([-(1:constant.initialResolutionIndex); 1:constant.initialResolutionIndex], [1 2*constant.initialResolutionIndex])];
temp = temp(rem((controller.intervalIndex(2)-controller.intervalIndex(1))./temp, 1)==0);
controller.resolutionIndex = temp(1);

%% Oscillator
for j = 1:numel(oscillator)
    oscillator(j).line = feval(['oscillator' oscillator(j).name], firm, controller.intervalIndex, oscillator(j).rule, oscillator(j).parameter);
end

%% Indicator
for j = 1:numel(indicator)
    [indicator(j).line, indicator(j).area] = feval(['indicator' indicator(j).name], firm, controller.intervalIndex, indicator(j).rule, indicator(j).foresight, indicator(j).parameter);
end

%% Strategy
[strategy.area, strategy.signal] = strategyMiner(firmWeekly, firmDaily);

%% Information
information = struct();
for i = 1:firm.total
    information(i).index = sprintf('Day Index: %u', firm.candle.IndexDay(i));
    information(i).date = sprintf('Date: (%s, %s)', dmmyVectorToList(firm.candle.dateGregorian(i, :), '%u', '-', ''), dmmyVectorToList(firm.candle.dateJalali(i, :), '%u', '-', ''));
    information(i).price = sprintf('Price: %s', dmmyVectorToList([firm.candle.start(i) firm.candle.low(i) firm.candle.open(i) firm.candle.close(i) firm.candle.high(i) firm.candle.mean(i) firm.candle.last(i)], '%.0f', ', ', '()'));
    for j = 1:numel(oscillator)
        switch oscillator(j).name
            case 'FullStochastic'
                temp = sprintf('Oscillator: %s', dmmyVectorToList([oscillator(j).line.dLine(i) oscillator(j).line.kLine(i)], '%.2f', ', ', '()'));
            case 'RSI'
                temp = sprintf('Oscillator: %s', dmmyVectorToList(oscillator(j).line.rsi(i), '%.2f', ', ', '()'));
            case 'MFI'
                temp = sprintf('Oscillator: %s', dmmyVectorToList(oscillator(j).line.mfi(i), '%.2f', ', ', '()'));
        end
        information(i).(['oscillator' int2str(j)]) = temp;
    end
    for j = 1:numel(indicator)
        temp = '';
        switch indicator(j).name
            case 'BasicVolume'
                temp = sprintf('Indicator: %s', dmmyVectorToList(indicator(j).line.volume(i), '%.0f', ', ', '()'));
            case 'ExpertVolume'
                temp = sprintf('Indicator: %s', dmmyVectorToList(indicator(j).line.volume(i, :), '%.0f', ', ', '()'));
            case 'Transfer'
                temp = sprintf('Indicator: %s', dmmyVectorToList([indicator(j).line.transfer(i) indicator(j).line.volumized(i) indicator(j).line.balance(i)], '%.2f', ', ', '()'));
            case 'Power'
                temp = sprintf('Indicator: %s', dmmyVectorToList([indicator(j).line.power(i) indicator(j).line.volumized(i) indicator(j).line.balance(i)], '%.2f', ', ', '()'));
            case 'Levels'
                if ~isnan(indicator(j).line.base(i))
                    temp = sprintf('Indicator: %s', dmmyVectorToList(indicator(j).line.base(i), '%.2f', ', ', '()'));
                end
            case 'Ichimoku'
                temp = sprintf('Indicator: %s', dmmyVectorToList([indicator(j).line.kijunSen(i) indicator(j).line.tenkanSen(i)], '%.2f', ', ', '()'));        
        end
        information(i).(['indicator' int2str(j)]) = temp;
    end
end

fprintf('\t- The environment is ready\n');

%% Graph
fprintf('%s\n', repmat('-', 1, 100));
fprintf('Drawing the environment\n');

handleFigure = figure(...
    'Units', 'normal',...
    'Position', [0.05 0.05 0.9 0.9],...
    'MenuBar', 'none',...
    'NumberTitle', 'off', 'Name', sprintf('Name: %s | Last Update: %s', firm.nameFarsi, datestr(firm.lastUpdate, 'mmmm dd, yyyy at HH:MM')),...
    'Resize', 'off',...
    'Color', palette.background.rgb,...
    'UserData', '');
handleFigure.UserData = struct(...
    'currentIndex', 0,...
    'currentOscillator', 1,...
    'currentIndicator', 1);
handleFigure.Units = 'pixels';

%%Main
handleAxesMain = axes(handleFigure,...
    'Units', 'pixel',...
    'Position', [0 0 handleFigure.Position(3) handleFigure.Position(4)],...
    'XLim', [0 handleFigure.Position(3)],...
    'YLim', [0 handleFigure.Position(4)],...
    'Visible', 'off');
hold(handleAxesMain, 'on');

handleContainerInitial = rectangle(handleAxesMain,...
    'Position', [constant.border constant.border controller.widthAxis(1)-1.5*constant.border controller.widthAxis(2)-1.5*constant.border],...
    'FaceColor', palette.container.rgb, 'EdgeColor', 'none');
handleContainerInitial.Curvature = 2*constant.radiusCorner./[handleContainerInitial.Position(3) handleContainerInitial.Position(4)];
handleContainerIndex = rectangle(handleAxesMain,...
    'Position', [controller.widthAxis(1)+0.5*constant.border constant.border handleAxesMain.XLim(2)-controller.widthAxis(1)-1.5*constant.border controller.widthAxis(2)-1.5*constant.border],...
    'FaceColor', palette.container.rgb, 'EdgeColor', 'none');
handleContainerIndex.Curvature = 2*constant.radiusCorner./[handleContainerIndex.Position(3) handleContainerIndex.Position(4)];
handleContainerPercentage = rectangle(handleAxesMain,...
    'Position', [constant.border controller.widthAxis(2)+0.5*constant.border controller.widthAxis(1)-1.5*constant.border (controller.ratioPercentagePrice/(1+controller.ratioPercentagePrice))*(handleAxesMain.YLim(2)-controller.widthAxis(2))-constant.border],...
    'FaceColor', palette.container.rgb, 'EdgeColor', 'none');
handleContainerPercentage.Curvature = 2*constant.radiusCorner./[handleContainerPercentage.Position(3) handleContainerPercentage.Position(4)];
handleContainerPrice = rectangle(handleAxesMain,...
    'Position', [constant.border controller.widthAxis(2)+(controller.ratioPercentagePrice/(1+controller.ratioPercentagePrice))*(handleAxesMain.YLim(2)-controller.widthAxis(2))+0.5*constant.border controller.widthAxis(1)-1.5*constant.border (1/(1+controller.ratioPercentagePrice))*(handleAxesMain.YLim(2)-controller.widthAxis(2))-1.5*constant.border],...
    'FaceColor', palette.container.rgb, 'EdgeColor', 'none');
handleContainerPrice.Curvature = 2*constant.radiusCorner./[handleContainerPrice.Position(3) handleContainerPrice.Position(4)];
handleContainerOscillator = rectangle(handleAxesMain,...
    'Position', [controller.widthAxis(1)+0.5*constant.border controller.widthAxis(2)+0.5*constant.border handleAxesMain.XLim(2)-controller.widthAxis(1)-1.5*constant.border (controller.ratioPercentagePrice/(1+controller.ratioPercentagePrice))*(handleAxesMain.YLim(2)-controller.widthAxis(2))-constant.border],...
    'FaceColor', palette.container.rgb, 'EdgeColor', 'none');
handleContainerOscillator.Curvature = 2*constant.radiusCorner./[handleContainerOscillator.Position(3) handleContainerOscillator.Position(4)];
handleContainerIndicatorAndGraph = rectangle(handleAxesMain,...
    'Position', [controller.widthAxis(1)+0.5*constant.border controller.widthAxis(2)+(controller.ratioPercentagePrice/(1+controller.ratioPercentagePrice))*(handleAxesMain.YLim(2)-controller.widthAxis(2))+0.5*constant.border handleAxesMain.XLim(2)-controller.widthAxis(1)-1.5*constant.border (1/(1+controller.ratioPercentagePrice))*(handleAxesMain.YLim(2)-controller.widthAxis(2))-1.5*constant.border],...
    'FaceColor', palette.container.rgb, 'EdgeColor', 'none');
handleContainerIndicatorAndGraph.Curvature = 2*constant.radiusCorner./[handleContainerIndicatorAndGraph.Position(3) handleContainerIndicatorAndGraph.Position(4)];

handleTextInitial = text(handleAxesMain,...
    'String', sprintf('Restore\nDefaults'),...
    'FontName', constant.fontName, 'FontSize', constant.fontSize,...
    'Color', palette.textLight.rgb,...
    'Position', [handleContainerInitial.Position(1)+0.5*handleContainerInitial.Position(3) handleContainerInitial.Position(2)+0.5*handleContainerInitial.Position(4) 0], ...
    'HorizontalAlignment', 'center',...
    'VerticalAlignment', 'middle',...
    'PickableParts', 'none');
handleLabelIndex = text(handleAxesMain,...
    'String', '',...
    'FontName', constant.fontName, 'FontSize', constant.fontSize,...
    'Color', palette.textLight.rgb,...
    'Position', [handleContainerIndex.Position(1)+0.5*handleContainerIndex.Position(3) handleContainerIndex.Position(2)+constant.margin 0], ...
    'HorizontalAlignment', 'center',...
    'VerticalAlignment', 'bottom',...
    'UserData', '');
handleLabelIndex.UserData = struct(...
    'default', sprintf('Interval: %s | Mapping: %s | Adjustment: %s | Strategy: %s%s', constant.firmInterval, mapping.description, dmmyIf(constant.adjustment, 'Enabled', 'Disabled'), strategy.name, dmmyIf(~strategy.visible, ' - Invisible', '')));
handleTicksIndex = gobjects(3, controller.resolutionIndex+1);
index = linspace(controller.intervalIndex(1), controller.intervalIndex(2), controller.resolutionIndex+1);
for i = 1:controller.resolutionIndex+1
    handleTicksIndex(1, i) = text(handleAxesMain,...
        'String', sprintf('%i', index(i)-index(end)),...
        'FontName', constant.fontName, 'FontSize', constant.fontSize,...
        'Color', palette.textLight.rgb,...
        'Position', [handleContainerIndex.Position(1)+constant.margin+(handleContainerIndex.Position(3)-2*constant.margin)*(index(i)-controller.intervalIndex(1)+constant.widthCandle)/(controller.intervalIndex(2)-controller.intervalIndex(1)+2*constant.widthCandle) handleContainerIndex.Position(2)+handleContainerIndex.Position(4)-constant.margin 0], ...
        'HorizontalAlignment', 'center',...
        'VerticalAlignment', 'top',...
        'UserData', '');
    handleTicksIndex(1, i).UserData = struct(...
        'value', index(i));
end
handleTicksIndex(1, 1).Position(1) = handleContainerIndex.Position(1) + constant.margin;
handleTicksIndex(1, 1).HorizontalAlignment = 'left';
handleTicksIndex(1, end).Position(1) = handleContainerIndex.Position(1) + handleContainerIndex.Position(3) - constant.margin;
handleTicksIndex(1, end).HorizontalAlignment = 'Right';

handleLabelPercentage = text(handleAxesMain,...
    'String', '',...
    'FontName', constant.fontName, 'FontSize', constant.fontSize,...
    'Color', palette.textLight.rgb,...
    'Position', [0 0 0], ...
    'Rotation', 90,...
    'HorizontalAlignment', 'center',...
    'VerticalAlignment', 'top',...
    'UserData', '');
handleLabelPercentage.Position(1:2) = [handleContainerPercentage.Position(1)+constant.margin handleContainerPercentage.Position(2)+0.5*handleContainerPercentage.Position(4)] - handleLabelPercentage.Extent(1:2) - [0 0.5*handleLabelPercentage.Extent(4)];
handleLabelPercentage.UserData = struct(...
        'menuType', 'Oscillator');
handleTicksPercentage = gobjects(2, controller.resolutionPercentage+1);
percentage = linspace(controller.intervalPercentage(1), controller.intervalPercentage(2), controller.resolutionPercentage+1);
for i = 1:controller.resolutionPercentage+1
    handleTicksPercentage(1, i) = text(handleAxesMain,...
        'String', sprintf('%.2f', percentage(i)),...
        'FontName', constant.fontName, 'FontSize', constant.fontSize,...
        'Color', palette.textLight.rgb,...
        'Position', [handleContainerPercentage.Position(1)+handleContainerPercentage.Position(3)-constant.margin handleContainerPercentage.Position(2)+constant.margin+(handleContainerPercentage.Position(4)-2*constant.margin)*(percentage(i)-controller.intervalPercentage(1))/(controller.intervalPercentage(2)-controller.intervalPercentage(1)) 0], ...
        'HorizontalAlignment', 'right',...
        'VerticalAlignment', 'middle',...
        'UserData', '');
    handleTicksPercentage(1, i).UserData = struct(...
        'value', percentage(i));
end
handleTicksPercentage(1, 1).VerticalAlignment = 'bottom';
handleTicksPercentage(1, end).VerticalAlignment = 'top';

handleLabelPrice = text(handleAxesMain,...
    'String', '',...
    'FontName', constant.fontName, 'FontSize', constant.fontSize,...
    'Color', palette.textLight.rgb,...
    'Position', [0 0 0], ...
    'Rotation', 90,...
    'HorizontalAlignment', 'center',...
    'VerticalAlignment', 'top',...
    'UserData', '');
handleLabelPrice.Position(1:2) = [handleContainerPrice.Position(1)+constant.margin handleContainerPrice.Position(2)+0.5*handleContainerPrice.Position(4)] - handleLabelPrice.Extent(1:2) - [0 0.5*handleLabelPrice.Extent(4)];
handleLabelPrice.UserData = struct(...
        'menuType', 'Indicator');
handleTicksPrice = gobjects(2, controller.resolutionPrice+1);
price = linspace(controller.intervalPrice(1), controller.intervalPrice(2), controller.resolutionPrice+1);
for i = 1:controller.resolutionPrice+1
    handleTicksPrice(1, i) = text(handleAxesMain,...
        'String', sprintf('%.2f', mapping.reverse(price(i))),...
        'FontName', constant.fontName, 'FontSize', constant.fontSize,...
        'Color', palette.textLight.rgb,...
        'Position', [handleContainerPrice.Position(1)+handleContainerPrice.Position(3)-constant.margin handleContainerPrice.Position(2)+constant.margin+(handleContainerPrice.Position(4)-2*constant.margin)*(price(i)-controller.intervalPrice(1))/(controller.intervalPrice(2)-controller.intervalPrice(1)) 0], ...
        'HorizontalAlignment', 'right',...
        'VerticalAlignment', 'middle',...
        'UserData', '');
    handleTicksPrice(1, i).UserData = struct(...
        'value', price(i));
end
handleTicksPrice(1, 1).VerticalAlignment = 'bottom';
handleTicksPrice(1, end).VerticalAlignment = 'top';

%%Oscillator
handleAxesOscillator = axes(handleFigure,...
    'Units', 'pixels',...
    'Position', [handleContainerOscillator.Position(1)+constant.margin handleContainerOscillator.Position(2)+constant.margin handleContainerOscillator.Position(3)-2*constant.margin handleContainerOscillator.Position(4)-2*constant.margin],...
    'XLim', [controller.intervalIndex(1)-constant.widthCandle controller.intervalIndex(2)+constant.widthCandle+max([indicator.foresight])],...
    'YLim', [controller.intervalPercentage(1) controller.intervalPercentage(2)],...
    'PickableParts', 'all',...
    'Visible', 'off');
hold(handleAxesOscillator, 'on');
handleLineHintOscillator = plot(handleAxesOscillator,...
    [0 0],...
    handleAxesOscillator.YLim,...
    'Color', [palette.background.rgb constant.alphaStrong],...
    'LineWidth', constant.ratioPxPt*constant.widthLineThick,...
    'PickableParts', 'none',...
    'Visible', 'off');
for i = 1:controller.resolutionIndex+1
    handleTicksIndex(2, i) = plot(handleAxesOscillator,...
        [1 1]*handleTicksIndex(1, i).UserData.value,...
        handleAxesOscillator.YLim,...
        'Color', [palette.grid.rgb constant.alphaStrong],...
        'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
        'PickableParts', 'none');
end
for i = 1:controller.resolutionPercentage+1
    handleTicksPercentage(2, i) = plot(handleAxesOscillator,...
        handleAxesOscillator.XLim,...
        [1 1]*handleTicksPercentage(1, i).UserData.value,...
        'Color', [palette.grid.rgb constant.alphaStrong],...
        'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
        'PickableParts', 'none');
end
handleTicksPercentage(2, 1).Color(4) = 0;
handleTicksPercentage(2, end).Color(4) = 0;
for j = 1:numel(oscillator)
    oscillator(j).handle = gobjects(0);
    switch oscillator(j).name
        case 'FullStochastic'
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.overSold,...
                'Color', palette.oscillatorBoundary.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.overBought,...
                'Color', palette.oscillatorBoundary.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.dLine,...
                'Color', palette.oscillatorBase.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.kLine,...
                'Color', palette.oscillatorSignal.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium',...
                'PickableParts', 'none',...
                'Visible', 'on');
        case 'RSI'
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.overSold,...
                'Color', palette.oscillatorBoundary.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.overBought,...
                'Color', palette.oscillatorBoundary.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.rsi,...
                'Color', palette.oscillatorBase.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
        case 'MFI'
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.overSold,...
                'Color', palette.oscillatorBoundary.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.overBought,...
                'Color', palette.oscillatorBoundary.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
            oscillator(j).handle(end+1) = plot(handleAxesOscillator,...
                oscillator(j).line.mfi,...
                'Color', palette.oscillatorBase.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'on');
    end
end

%%Indicator and Graph
handleAxesIndicatorAndGraph = axes(handleFigure,...
    'Units', 'pixels',...
    'Position', [handleContainerIndicatorAndGraph.Position(1)+constant.margin handleContainerIndicatorAndGraph.Position(2)+constant.margin handleContainerIndicatorAndGraph.Position(3)-2*constant.margin handleContainerIndicatorAndGraph.Position(4)-2*constant.margin],...
    'XLim', [controller.intervalIndex(1)-constant.widthCandle controller.intervalIndex(2)+constant.widthCandle+max([indicator.foresight])],...
    'YLim', [controller.intervalPrice(1) controller.intervalPrice(2)],...
    'PickableParts', 'all',...
    'Visible', 'off');
hold(handleAxesIndicatorAndGraph, 'on');
handleLineHintIndicatorAndGraph = plot(handleAxesIndicatorAndGraph,...
    [0 0],...
    handleAxesIndicatorAndGraph.YLim,...
    'Color', [palette.background.rgb constant.alphaStrong],...
    'LineWidth', constant.ratioPxPt*constant.widthLineThick,...
    'PickableParts', 'none',...
    'Visible', 'off');
for i = 1:controller.resolutionIndex+1
    handleTicksIndex(3, i) = plot(handleAxesIndicatorAndGraph,...
        [1 1]*handleTicksIndex(1, i).UserData.value,...
        handleAxesIndicatorAndGraph.YLim,...
        'Color', [palette.grid.rgb constant.alphaStrong],...
        'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
        'PickableParts', 'none');
end
for i = 1:controller.resolutionPrice+1
    handleTicksPrice(2, i) = plot(handleAxesIndicatorAndGraph,...
        handleAxesIndicatorAndGraph.XLim,...
        [1 1]*handleTicksPrice(1, i).UserData.value,...
        'Color', [palette.grid.rgb constant.alphaStrong],...
        'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
        'PickableParts', 'none');
end
handleTicksPrice(2, 1).Color(4) = 0;
handleTicksPrice(2, end).Color(4) = 0;
for j = 1:numel(indicator)
    indicator(j).handle = gobjects(0);
    switch indicator(j).name
        case 'BasicVolume'
            temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*indicator(j).line.volume/max(indicator(j).line.volume) + handleAxesIndicatorAndGraph.YLim(1);
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                temp,...
                'Color', palette.indicatorBase.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
        case 'ExpertVolume'
            for l = 1:size(indicator(j).line.volume, 2)
                temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*indicator(j).line.volume(:, l)/max(indicator(j).line.volume(:, l)) + handleAxesIndicatorAndGraph.YLim(1);
                indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                    temp,...
                    'Color', palette.(['indicatorExtra' int2str(l)]).rgb,...
                    'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                    'PickableParts', 'none',...
                    'Visible', 'off');
            end
        case 'Transfer'
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                [controller.intervalIndex(1) controller.intervalIndex(2)+indicator(j).foresight],...
                mean(handleAxesIndicatorAndGraph.YLim)*[1 1],...
                'Color', palette.indicatorBase.rgb,...
                'LineStyle', ':',...
                'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
                'PickableParts', 'none',...
                'Visible', 'off');
            temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*(indicator(j).line.transfer/max(abs(indicator(j).line.transfer))+1)/2 + handleAxesIndicatorAndGraph.YLim(1);
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                temp,...
                'Color', palette.indicatorExtra1.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
            temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*(indicator(j).line.volumized/max(abs(indicator(j).line.volumized))+1)/2 + handleAxesIndicatorAndGraph.YLim(1);
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                temp,...
                'Color', palette.indicatorExtra2.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
            temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*(indicator(j).line.balance-min(indicator(j).line.balance))/(max(indicator(j).line.balance)-min(indicator(j).line.balance)) + handleAxesIndicatorAndGraph.YLim(1);
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                temp,...
                'Color', palette.indicatorExtra3.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
        case 'Power'
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                [controller.intervalIndex(1) controller.intervalIndex(2)+indicator(j).foresight],...
                mean(handleAxesIndicatorAndGraph.YLim)*[1 1],...
                'Color', palette.indicatorBase.rgb,...
                'LineStyle', ':',...
                'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
                'PickableParts', 'none',...
                'Visible', 'off');
            temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*(indicator(j).line.power/max(abs(indicator(j).line.power))+1)/2 + handleAxesIndicatorAndGraph.YLim(1);
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                temp,...
                'Color', palette.indicatorExtra1.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
            temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*(indicator(j).line.volumized/max(abs(indicator(j).line.volumized))+1)/2 + handleAxesIndicatorAndGraph.YLim(1);
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                temp,...
                'Color', palette.indicatorExtra2.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
            temp = (handleAxesIndicatorAndGraph.YLim(2)-handleAxesIndicatorAndGraph.YLim(1))*(indicator(j).line.balance-min(indicator(j).line.balance))/(max(indicator(j).line.balance)-min(indicator(j).line.balance)) + handleAxesIndicatorAndGraph.YLim(1);
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                temp,...
                'Color', palette.indicatorExtra3.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
        case 'Levels'
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                mapping.forward(indicator(j).line.base),...
                'Color', palette.indicatorSignal.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                'PickableParts', 'none',...
                'Visible', 'off');
            idx = controller.intervalIndex(1):dmmyClip(controller.intervalIndex(2)+indicator(j).foresight, 'Above', numel(indicator(j).line.fractal));
            idx = idx(~isnan(indicator(j).line.fractal(idx)));
            indicator(j).handle(end+1) = scatter(handleAxesIndicatorAndGraph,...
                idx,...
                mapping.forward(indicator(j).line.fractal(idx)),...
                'Marker', 'o',...
                'MarkerFaceColor', palette.indicatorSignal.rgb ,'MarkerFaceAlpha', constant.alphaMedium,...
                'MarkerEdgeColor', palette.indicatorSignal.rgb,...
                'SizeData', pi*constant.ratioPxPt*constant.widthLineThick^2,...
                'PickableParts', 'none',...
                'Visible', 'off');
            for k = 1:numel(indicator(j).line.level)
                indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                    [controller.intervalIndex(1)-constant.widthCandle controller.intervalIndex(2)+constant.widthCandle],...
                    [1 1]*indicator(j).line.level(k),...
                    'Color', [palette.grid.rgb constant.alphaStrong],...
                    'LineWidth', constant.ratioPxPt*(constant.widthLineThick-(constant.widthLineThick-constant.widthLineThin)*(k-1)/(numel(indicator(j).line.level)-1)),...
                    'PickableParts', 'none',...
                    'Visible', 'off');
            end
            for k = fliplr(1:numel(indicator(j).line.level))
                indicator(j).handle(end+1) = text(handleAxesMain,...
                    'String', sprintf('%u: %.2f', k, mapping.reverse(indicator(j).line.level(k))),...
                    'FontName', constant.fontName, 'FontSize', constant.fontSize,...
                    'Color', palette.textLight.rgb,...
                    'BackgroundColor',[ palette.container.rgb constant.alphaWeak],...
                    'Margin', constant.ratioPxPt*constant.border,...
                    'Position', [handleContainerPrice.Position(1)+handleContainerPrice.Position(3)-constant.margin handleContainerPrice.Position(2)+constant.margin+(handleContainerPrice.Position(4)-2*constant.margin)*(indicator(j).line.level(k)-controller.intervalPrice(1))/(controller.intervalPrice(2)-controller.intervalPrice(1)) 0], ...
                    'HorizontalAlignment', 'right',...
                    'VerticalAlignment', 'middle');
            end
        case 'Ichimoku'
            idx = find((indicator(j).area.periodKumoPositive(:, 1)<=controller.intervalIndex(2)+indicator(j).foresight)&(controller.intervalIndex(1)<=indicator(j).area.periodKumoPositive(:, 2)));
            for i = 1:numel(idx)
                temp = indicator(j).area.periodKumoPositive(idx(i), 1):indicator(j).area.periodKumoPositive(idx(i), 2);
                indicator(j).handle(end+1) = fill(handleAxesIndicatorAndGraph,...
                    [temp.'; flip(temp).'],...
                    mapping.forward([indicator(j).line.senkuSupanA(temp); indicator(j).line.senkuSupanB(flip(temp))]),...
                    palette.indicatorExtra2.rgb, 'FaceAlpha', constant.alphaStrong,...
                    'EdgeColor', 'none', ...
                    'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                    'PickableParts', 'none',...
                    'Visible', 'off');
            end
            idx = find((indicator(j).area.periodKumoNegative(:, 1)<=controller.intervalIndex(2)+indicator(j).foresight)&(controller.intervalIndex(1)<=indicator(j).area.periodKumoNegative(:, 2)));
            for i = 1:numel(idx)
                temp = indicator(j).area.periodKumoNegative(idx(i), 1):indicator(j).area.periodKumoNegative(idx(i), 2);
                indicator(j).handle(end+1) = fill(handleAxesIndicatorAndGraph,...
                    [temp.'; flip(temp).'],...
                    mapping.forward([indicator(j).line.senkuSupanA(temp); indicator(j).line.senkuSupanB(flip(temp))]),...
                    palette.indicatorExtra3.rgb, 'FaceAlpha', constant.alphaStrong,...
                    'EdgeColor', 'none', ...
                    'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
                    'PickableParts', 'none',...
                    'Visible', 'off');
            end
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                mapping.forward(indicator(j).line.chikoSupan),...
                'Color', palette.indicatorExtra1.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
                'PickableParts', 'none',...
                'Visible', 'off');
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                mapping.forward(indicator(j).line.kijunSen),...
                'Color', palette.indicatorBase.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
                'PickableParts', 'none',...
                'Visible', 'off');
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                mapping.forward(indicator(j).line.tenkanSen),...
                'Color', palette.indicatorSignal.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
                'PickableParts', 'none',...
                'Visible', 'off');
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                mapping.forward(indicator(j).line.senkuSupanA),...
                'Color', palette.indicatorExtra2.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
                'PickableParts', 'none',...
                'Visible', 'off');
            indicator(j).handle(end+1) = plot(handleAxesIndicatorAndGraph,...
                mapping.forward(indicator(j).line.senkuSupanB),...
                'Color', palette.indicatorExtra3.rgb,...
                'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
                'PickableParts', 'none',...
                'Visible', 'off');
    end
end
idx = controller.intervalIndex(1):dmmyClip(controller.intervalIndex(2), 'Above', firm.total);
for i = 1:numel(idx)
    postition = mapping.forward([firm.candle.low(idx(i)) min(firm.candle.open(idx(i)), firm.candle.close(idx(i))) max(firm.candle.open(idx(i)), firm.candle.close(idx(i))) firm.candle.high(idx(i))]);
    colorFace = [palette.candle.rgb (firm.candle.open(idx(i))<=firm.candle.close(idx(i)))*constant.alphaStrong+(firm.candle.open(idx(i))>firm.candle.close(idx(i)))*constant.alphaWeak];
    colorEdge = palette.candle.rgb;
    plot(handleAxesIndicatorAndGraph,...
        [1 1]*idx(i),...
        postition(1:2),...
        'Color', colorEdge,...
        'LineWidth', constant.ratioPxPt*constant.widthLineMedium,...
        'PickableParts', 'none');
    plot(handleAxesIndicatorAndGraph,...
        [1 1]*idx(i),...
        postition(3:4),...
        'Color', colorEdge,...
        'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
        'PickableParts', 'none');
    rectangle(handleAxesIndicatorAndGraph,...
        'Position', [idx(i)-0.5*constant.widthCandle postition(2) constant.widthCandle postition(3)-postition(2)],...
        'FaceColor', colorFace,...
        'EdgeColor', colorEdge,...
        'LineWidth', constant.ratioPxPt*constant.widthLineThin,...
        'PickableParts', 'none');
end

%%Strategy
handleAxesStrategyOscillator = axes(handleFigure,...
    'Units', 'pixels',...
    'Position', handleAxesOscillator.Position,...
    'XLim', handleAxesOscillator.XLim,...
    'YLim', handleAxesOscillator.YLim,...
    'PickableParts', 'none',...
    'Visible', 'off');
hold(handleAxesStrategyOscillator, 'on');
switch char(strategy.name*strategy.visible)
    case 'Miner'
        if strcmp(constant.firmInterval, 'Daily')
            idx = find((strategy.area.periodBuy(:, 1)<=controller.intervalIndex(2))&(controller.intervalIndex(1)<=strategy.area.periodBuy(:, 2)));
            for i = 1:numel(idx)
                rectangle(handleAxesStrategyOscillator,...
                    'Position', [strategy.area.periodBuy(idx(i), 1) handleAxesStrategyOscillator.YLim(1) strategy.area.periodBuy(idx(i), 2)-strategy.area.periodBuy(idx(i), 1) handleAxesStrategyOscillator.YLim(2)-handleAxesStrategyOscillator.YLim(1)],...
                    'FaceColor', [palette.strategyBuy.rgb constant.alphaStrong],...
                    'EdgeColor', [palette.strategyBuy.rgb constant.alphaMedium],...
                    'LineWidth', constant.ratioPxPt*constant.widthLineMedium);
            end
            idx = find((strategy.area.periodSale(:, 1)<=controller.intervalIndex(2))&(controller.intervalIndex(1)<=strategy.area.periodSale(:, 2)));
            for i = 1:numel(idx)
                rectangle(handleAxesStrategyOscillator,...
                    'Position', [strategy.area.periodSale(idx(i), 1) handleAxesStrategyOscillator.YLim(1) strategy.area.periodSale(idx(i), 2)-strategy.area.periodSale(idx(i), 1) handleAxesStrategyOscillator.YLim(2)-handleAxesStrategyOscillator.YLim(1)],...
                    'FaceColor', [palette.strategySale.rgb constant.alphaStrong],...
                    'EdgeColor', [palette.strategySale.rgb constant.alphaMedium],...
                    'LineWidth', constant.ratioPxPt*constant.widthLineMedium);
            end
            idx = find((controller.intervalIndex(1)<=strategy.signal.index)&(strategy.signal.index<=controller.intervalIndex(2)));
            for i = 1:numel(idx)
                colorFace = strategy.signal.isBuy(idx(i))*palette.strategyBuy.rgb + ~strategy.signal.isBuy(idx(i))*palette.strategySale.rgb;
                scatter(handleAxesStrategyOscillator,...
                    strategy.signal.index(idx(i)),...
                    strategy.signal.percentage(idx(i)),...
                    pi*(3*constant.ratioPxPt*constant.widthLineMedium)^2,...
                    'MarkerFaceColor', colorFace,...
                    'MarkerFaceAlpha', constant.alphaMedium,...
                    'MarkerEdgeColor', colorFace,...
                    'LineWidth', constant.ratioPxPt*constant.widthLineThin);
            end
        end
end

%%Menu
handleAxesMenu = axes(handleFigure,...
    'Units', 'pixels',...
    'Position', handleAxesMain.Position,...
    'XLim', handleAxesMain.XLim,...
    'YLim', handleAxesMain.YLim,...
    'Visible', 'off');
hold(handleAxesMenu, 'on');
totalItem = numel(oscillator);
handleMenuOscillator = rectangle(handleAxesMenu,...
    'Position', [handleContainerPercentage.Position(1) handleContainerPercentage.Position(2)+0.5*(handleContainerPercentage.Position(4)-totalItem*controller.heightItem-(totalItem+1)*constant.margin) 0 totalItem*controller.heightItem+(totalItem+1)*constant.margin],...
    'FaceColor', palette.background.rgb, 'EdgeColor', 'none',...
    'Visible', 'off');
handleItemOscillator = gobjects(1, totalItem);
for j = 1:totalItem
    handleItemOscillator(j) = text(handleAxesMenu,...
        'String', sprintf('%u: %s%s%s', j, oscillator(j).name, dmmyVectorToList(oscillator(j).rule, '%s', ', ', '[]'), dmmyVectorToList(oscillator(j).parameter, '%u', ', ', ' ()')),...
        'FontName', constant.fontName, 'FontSize', constant.fontSize,...
        'FontWeight', 'bold',...
        'Color', palette.textDark.rgb,...
        'Position', [handleMenuOscillator.Position(1)+constant.margin handleMenuOscillator.Position(2)+(totalItem-j+0.5)*controller.heightItem+(totalItem-j+1)*constant.margin 0], ...
        'HorizontalAlignment', 'left',...
        'VerticalAlignment', 'middle',...
        'Visible', 'off',...
        'UserData', '');
    handleItemOscillator(j).UserData = struct(...
        'code', j);
    temp = handleItemOscillator(j).Extent(3) + 2*constant.margin;
    if handleMenuOscillator.Position(3) < temp
        handleMenuOscillator.Position(3) = temp;
    end
end
item = {indicator.name};
totalItem = numel(indicator);
handleMenuIndicator = rectangle(handleAxesMenu,...
    'Position', [handleContainerPrice.Position(1) handleContainerPrice.Position(2)+0.5*(handleContainerPrice.Position(4)-totalItem*controller.heightItem-(totalItem+1)*constant.margin) 0 totalItem*controller.heightItem+(totalItem+1)*constant.margin],...
    'FaceColor', palette.background.rgb, 'EdgeColor', 'none',...
    'Visible', 'off');
handleItemIndicator = gobjects(1, totalItem);
for j = 1:totalItem
    handleItemIndicator(j) = text(handleAxesMenu,...
        'String', sprintf('%u: %s%s-%u%s', j, indicator(j).name, dmmyVectorToList(indicator(j).rule, '%s', ', ', '[]'), indicator(j).foresight, dmmyVectorToList(indicator(j).parameter, '%.3g', ', ', ' ()')),...
        'FontName', constant.fontName, 'FontSize', constant.fontSize,...
        'FontWeight', 'bold',...
        'Color', palette.textDark.rgb,...
        'Position', [handleMenuIndicator.Position(1)+constant.margin handleMenuIndicator.Position(2)+(totalItem-j+0.5)*controller.heightItem+(totalItem-j+1)*constant.margin 0], ...
        'HorizontalAlignment', 'left',...
        'VerticalAlignment', 'middle',...
        'Visible', 'off',...
        'UserData', '');
    handleItemIndicator(j).UserData = struct(...
        'code', j);
    temp = handleItemIndicator(j).Extent(3) + 2*constant.margin;
    if handleMenuIndicator.Position(3) < temp
        handleMenuIndicator.Position(3) = temp;
    end
end

%%Set Pointer Behavior
iptPointerManager(handleFigure, 'enable');
behaviorPointer.enterFcn = @(handleFigure, currentPoint) set(handleFigure, 'Pointer', 'hand');
behaviorPointer.exitFcn = [];
behaviorPointer.traverseFcn = [];
iptSetPointerBehavior(handleContainerInitial, behaviorPointer);
iptSetPointerBehavior(handleLabelPercentage, behaviorPointer);
iptSetPointerBehavior(handleLabelPrice, behaviorPointer);
for j = 1:numel(handleItemOscillator)
    iptSetPointerBehavior(handleItemOscillator(j), behaviorPointer);
end
for j = 1:numel(handleItemIndicator)
    iptSetPointerBehavior(handleItemIndicator(j), behaviorPointer);
end

%%Set Callbacks
handleFigure.WindowButtonDownFcn = {@cllbckHideMenu handleAxesMenu};
handleContainerInitial.ButtonDownFcn = {@cllbckRestoreDefaults handleLabelIndex handleLineHintOscillator handleLineHintIndicatorAndGraph};
handleLabelPercentage.ButtonDownFcn = {@cllbckShowMenu handleMenuOscillator handleItemOscillator};
handleLabelPrice.ButtonDownFcn = {@cllbckShowMenu handleMenuIndicator handleItemIndicator};
handleAxesOscillator.ButtonDownFcn = {@cllbckShowInformation information handleLabelIndex handleLineHintOscillator handleLineHintIndicatorAndGraph};
handleAxesIndicatorAndGraph.ButtonDownFcn = {@cllbckShowInformation information handleLabelIndex handleLineHintOscillator handleLineHintIndicatorAndGraph};
for j = 1:numel(handleItemOscillator)
    handleItemOscillator(j).ButtonDownFcn = {@cllbckChooseItem handleLabelPercentage oscillator handleTicksIndex handleTicksPercentage information handleLabelIndex handleLineHintOscillator handleLineHintIndicatorAndGraph};
end
for j = 1:numel(handleItemIndicator)
    handleItemIndicator(j).ButtonDownFcn = {@cllbckChooseItem handleLabelPrice indicator handleTicksIndex handleTicksPrice information handleLabelIndex handleLineHintOscillator handleLineHintIndicatorAndGraph};
end

%%Invoke Functions
funcInvertOscillator(handleLabelPercentage, oscillator, handleTicksIndex, handleTicksPercentage);
funcInvertIndicator(handleLabelPrice, indicator, handleTicksIndex, handleTicksPrice);
funcInvertInformation(information, handleLabelIndex, handleLineHintOscillator, handleLineHintIndicatorAndGraph);

fprintf('\t- The environment was drawn\n');